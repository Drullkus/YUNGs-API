buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'signing'

// Maven info
version = "${modMinecraftVersion}-${modBuildNum}"
group = modGroup
archivesBaseName = modFileName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: modMcpMappingsChannel, version: modMcpMappingsVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
//            property 'mixin.env.disableRefMap', 'true'
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
//            property 'forge.logging.console.level', 'debug'

            mods { yungsapi { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
//            property 'mixin.env.disableRefMap', 'true'
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
//            property 'forge.logging.console.level', 'debug'

            mods { yungsapi { source sourceSets.main } }
        }

        data {
            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
//            property 'forge.logging.console.level', 'debug'

            args '--mod', 'yungsapi', '--all', '--output', file('src/generated/resources/')

            mods { yungsapi { source sourceSets.main } }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:" + modMinecraftVersion + "-" + modForgeVersion
    implementation 'com.google.code.gson:gson:2.8.6'
}

processResources {
    // this will ensure that this task is redone when any variables change
    inputs.property "modId", modId
    inputs.property "version", project.version
    inputs.property "modName", modName
    inputs.property "modCredits", modCredits
    inputs.property "modAuthor", modAuthor
    inputs.property "modDescription", modDescription
    inputs.property "modMinecraftVersion", modMinecraftVersion

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace vars in mods.toml
        expand 'modId':modId,
                'version': project.version,
                'modName':modName,
                'modCredits':modCredits,
                'modAuthor':modAuthor,
                'modDescription':modDescription,
                'modMinecraftVersion': modMinecraftVersion
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : modId,
                "Specification-Vendor"    : modGroup,
                "Specification-Version"   : "1.0", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : modGroup,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned"
        ],)
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

// Note that the ossrhUsername and ossrhPassword, as well as the
// signing.keyId, signing.password, and signing.secretKeyRingFile variables are defined separately
// in my global gradle.properties for protection
signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name modName
                packaging 'jar'
                // optionally artifactId can be defined here
                description modDescription
                url 'https://github.com/yungnickyoung/YUNGs-Api'

                scm {
                    url 'https://github.com/yungnickyoung/YUNGs-Api'
                    connection 'scm:git:git://github.com/yungnickyoung/YUNGs-Api.git'
                    developerConnection 'scm:git:ssh://git@github.com:yungnickyoung/YUNGs-Api.git'
                }
                licenses {
                    license {
                        name 'GNU GPLv3'
                        url 'https://github.com/yungnickyoung/YUNGs-Api/blob/forge-1.16.3/LICENSE'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        name 'YUNGNICKYOUNG'
                        email 'yungnickyoung@gmail.com'
                    }
                }
            }
        }
    }
}